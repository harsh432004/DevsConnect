{"version":3,"sources":["index.js"],"names":["express","require","cors","rateLimit","redisClient","cookieParser","profileRouter","connectDB","userRouter","analyticsLogger","metricsRouter","client","logger","authRouter","PORT","process","env","collectMetrics","collectDefaultMetrics","requestRouter","register","trackTime","Histogram","name","help","labelNames","buckets","Counter","app","allowedOrigins","credentials","responseTime","req","res","time","trackTotalRequest","inc","labels","method","route","statusCode","observe","status_code","max","message","use","apiLimiter","json","activity","startServer","regeneratorRuntime","async","_context","prev","next","awrap","info","get","concat","t0","stop"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,KAAOD,QAAQ,QADfD,aAAiBC,QAAC,iBAGlBE,UAAYF,QAAQ,sBAFpBC,UAAcD,QAApB,8BAIwBA,QAAQ,kBAAxBG,qBAAAA,YAHFC,OAAAA,QAAeJ,kBACfE,WAAYF,QAAQ,iBAMpBK,cAAgBL,QAAQ,oBALxBM,cAAYN,QAAQ,oBAOpBO,WAAaP,QAAQ,iBACrBQ,gBAP0BR,QAAA,2BAAxBG,SAQSH,QAAQ,qBACnBS,cAAgBT,QAAQ,oBACxBU,OAASV,QAAQ,eATjBW,aAAiBX,QAAA,iBAEjBY,IAAAA,UAWAC,KAAOC,QAAQC,IAAIF,MAAQ,KAE3BG,eAAiBN,OAAOO,sBAX9BD,eAAME,CAAaC,SAAUT,OAACS,WAa9B,IAAMC,UAAY,IAAIV,OAAOW,UAAU,CAZvCC,KAAMf,yBAcJgB,KAAM,6CAbRC,WAAMhB,CAAAA,SAAkBR,QAAQ,eAe9ByB,QAAS,CAAC,EAAG,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAM,OAb5ChB,kBAAgBT,IAAQU,OAAAgB,QAAA,CAiB5BJ,KAAM,sBAhBRC,KAAMb,kCAGAiB,eAAN,CACA,6CAEA,sCACAX,wBAAiBG,yBAGfI,IAAAA,IACAC,KAAAA,CACAC,OAAUG,eAEZC,aAAA,KAGEN,IAAAA,IAFFO,aAKA,SAAAC,EAAAC,EAAAC,GAkBIC,kBAAkBC,MAjBhBP,UAmBCQ,OAAO,CAVZnC,OAAK8B,EAAAM,OACGC,MAAEV,EAAAA,IACRC,YAAaG,EAAAO,aAIjBC,QACEV,MAKMQ,IAAAA,WAFMpC,UAAA,CAGNuC,SAAAA,KAHMC,IAKPF,IATPG,QAAA,+CAc4BhB,IAAAiB,IAAAC,YAE1BF,IAAAA,IAAAA,QAASG,QAHkBnB,IAA7BiB,IAAAxC,gBAMAuB,IAAIiB,IAAIC,iBAGRlB,IAAIiB,IAAIxC,IAAAA,YACRuB,IAAIiB,IAAIpC,IAAAA,eAIRmB,IAAIiB,IAAI,IAAK1B,eAFbS,IAAIiB,IAAI,IAAKhC,YACbe,IAAIiB,IAAI,QAAKvC,UACbsB,IAAIiB,IAAI,IAAK1B,eAEbS,IAAIiB,IAAI,IAAA,SAAAb,EAASgB,GACjBpB,EAAIiB,KAAJ,uBAOA,IAAMI,YAAc,WAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAK,MAAAhD,aAAA,KAAA,EAAAK,OAAA4C,KAAA,uCAAA5C,OAAA4C,KAAA,qCAGhB5B,IAAA6B,IAAA,IAAA,SAAAzB,EAAAC,GACArB,EAAAA,KAAO4C,kCAEP5C,OAAA4C,KAAA,oCAEA5C,IAAAA,OAAAA,KAAA,WASEA,OAAO4C,KAAP,gCAAAE,OAA4C5C,KAA5C,UAjBcsC,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAO,GAAAP,EAAA,MAAA,GAaZxC,OAAAA,MAAAA,gCAAYwC,EAAAO,GAAAf,SAbA,KAAA,GAAA,IAAA,MAAA,OAAAQ,EAAAQ,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAiBdhD","file":"index.min.js","sourcesContent":["const express = require(\"express\");\r\nconst cors = require(\"cors\");\r\nconst cookieParser = require(\"cookie-parser\");\r\nconst rateLimit = require(\"express-rate-limit\");\r\nconst connectDB = require(\"./config/database\");\r\nconst { redisClient } = require(\"./config/redis\"); // Import Redis client\r\nconst logger = require(\"./utils/logger\"); \r\n\r\nconst authRouter = require(\"./routes/auth\");\r\nconst profileRouter = require(\"./routes/profile\");\r\nconst requestRouter = require(\"./routes/request\");\r\nconst userRouter = require(\"./routes/user\");\r\nconst analyticsLogger = require(\"./utils/analyticsLogger\");\r\nconst activity = require(\"./routes/activity\");\r\nconst metricsRouter = require(\"./routes/metrics\");\r\nconst client = require(\"prom-client\");\r\nconst responseTime = require(\"response-time\");\r\n\r\nconst app = express();\r\nconst PORT = process.env.PORT || 7777;\r\n\r\nconst collectMetrics = client.collectDefaultMetrics;\r\ncollectMetrics({ register: client.register });\r\nconst trackTime = new client.Histogram({\r\n  name: \"track_all_req_res_time\",\r\n  help: \"Tracking all the Request and Responce Time\",\r\n  labelNames: [\"method\", \"route\", \"status_code\"],\r\n  buckets: [1, 50, 100, 200, 400, 500, 800, 1000, 2000],\r\n});\r\n// To Track total number of Request\r\nconst trackTotalRequest = new client.Counter({\r\n  name: \"track_total_request\",\r\n  help: \"This will track total request\",\r\n});\r\n\r\n// Allowed origins for CORS\r\nconst allowedOrigins = [\r\n  \"https://intrest-fusion-frontend.vercel.app\",\r\n  \"https://another-frontend.vercel.app\",\r\n  \"http://localhost:5173\",\r\n  \"http://localhost:3000\",\r\n];\r\n\r\n// Middleware\r\napp.use(\r\n  cors({\r\n    origin: allowedOrigins,\r\n    credentials: true,\r\n  })\r\n);\r\n\r\napp.use(\r\n  responseTime((req, res, time) => {\r\n    trackTotalRequest.inc();\r\n    trackTime\r\n      .labels({\r\n        method: req.method,\r\n        route: req.url,\r\n        status_code: res.statusCode,\r\n      })\r\n      .observe(time);\r\n  })\r\n);\r\n\r\nconst apiLimiter = rateLimit({\r\n  windowMs: 60 * 60 * 1000, // 1 hour\r\n  max: 5000,\r\n  message: \"Too many requests, please try again later.\",\r\n});\r\n\r\napp.use(apiLimiter);\r\n\r\napp.use(express.json());\r\napp.use(cookieParser());\r\napp.use(analyticsLogger);\r\n// Routes\r\napp.use(\"/\", authRouter);\r\napp.use(\"/\", profileRouter);\r\napp.use(\"/\", requestRouter);\r\napp.use(\"/\", userRouter);\r\napp.use(\"/api/\", activity);\r\napp.use(\"/\", metricsRouter);\r\n\r\napp.get(\"/\", (req, res) => {\r\n  res.send(\"Server is running\");\r\n});\r\n\r\n// Database and Redis connection, then server initialization\r\nconst startServer = async () => {\r\n  try {\r\n    await connectDB();\r\n    //console.log(\"✅ Database connection established...\");\r\n    logger.info(\"Database connection established....\");\r\n    // Initialize Redis connection\r\n    //Uncomment this when you need redis caching\r\n    //redisClient.connect(); // Explicitly connect if using Redis 4.x+\r\n    logger.info(\"✅ Redis connection established...\");\r\n\r\n      //api check\r\n      app.get(\"/\", (req, res) => {\r\n        res.send(\"Welcome to Internet Fusion API\");\r\n        logger.info(\"Welcome to Internet Fusion API\");\r\n      });\r\n    // Start server\r\n    app.listen(PORT, () => {\r\n      logger.info(`🚀 Server is running on port ${PORT}...`);\r\n    });\r\n  } catch (err) {\r\n    logger.error(\"❌ Failed to start the server:\", err.message);\r\n  }\r\n};\r\n\r\nstartServer();\r\n"]}