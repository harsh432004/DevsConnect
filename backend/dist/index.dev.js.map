{"version":3,"sources":["index.js"],"names":["express","require","cors","cookieParser","rateLimit","connectDB","redisClient","logger","authRouter","profileRouter","requestRouter","userRouter","analyticsLogger","activity","metricsRouter","client","responseTime","app","PORT","process","env","collectMetrics","collectDefaultMetrics","register","trackTime","Histogram","name","help","labelNames","buckets","trackTotalRequest","Counter","allowedOrigins","use","origin","credentials","req","res","time","inc","labels","method","route","url","status_code","statusCode","observe","apiLimiter","windowMs","max","message","json","get","send","startServer","info","listen","error"],"mappings":"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","sourcesContent":["const express = require(\"express\");\r\nconst cors = require(\"cors\");\r\nconst cookieParser = require(\"cookie-parser\");\r\nconst rateLimit = require(\"express-rate-limit\");\r\nconst connectDB = require(\"./config/database\");\r\nconst { redisClient } = require(\"./config/redis\"); // Import Redis client\r\nconst logger = require(\"./utils/logger\"); \r\n\r\nconst authRouter = require(\"./routes/auth\");\r\nconst profileRouter = require(\"./routes/profile\");\r\nconst requestRouter = require(\"./routes/request\");\r\nconst userRouter = require(\"./routes/user\");\r\nconst analyticsLogger = require(\"./utils/analyticsLogger\");\r\nconst activity = require(\"./routes/activity\");\r\nconst metricsRouter = require(\"./routes/metrics\");\r\nconst client = require(\"prom-client\");\r\nconst responseTime = require(\"response-time\");\r\n\r\nconst app = express();\r\nconst PORT = process.env.PORT || 7777;\r\n\r\nconst collectMetrics = client.collectDefaultMetrics;\r\ncollectMetrics({ register: client.register });\r\nconst trackTime = new client.Histogram({\r\n  name: \"track_all_req_res_time\",\r\n  help: \"Tracking all the Request and Responce Time\",\r\n  labelNames: [\"method\", \"route\", \"status_code\"],\r\n  buckets: [1, 50, 100, 200, 400, 500, 800, 1000, 2000],\r\n});\r\n// To Track total number of Request\r\nconst trackTotalRequest = new client.Counter({\r\n  name: \"track_total_request\",\r\n  help: \"This will track total request\",\r\n});\r\n\r\n// Allowed origins for CORS\r\nconst allowedOrigins = [\r\n  \"https://intrest-fusion-frontend.vercel.app\",\r\n  \"https://another-frontend.vercel.app\",\r\n  \"http://localhost:5173\",\r\n  \"http://localhost:3000\",\r\n];\r\n\r\n// Middleware\r\napp.use(\r\n  cors({\r\n    origin: allowedOrigins,\r\n    credentials: true,\r\n  })\r\n);\r\n\r\napp.use(\r\n  responseTime((req, res, time) => {\r\n    trackTotalRequest.inc();\r\n    trackTime\r\n      .labels({\r\n        method: req.method,\r\n        route: req.url,\r\n        status_code: res.statusCode,\r\n      })\r\n      .observe(time);\r\n  })\r\n);\r\n\r\nconst apiLimiter = rateLimit({\r\n  windowMs: 60 * 60 * 1000, // 1 hour\r\n  max: 5000,\r\n  message: \"Too many requests, please try again later.\",\r\n});\r\n\r\napp.use(apiLimiter);\r\n\r\napp.use(express.json());\r\napp.use(cookieParser());\r\napp.use(analyticsLogger);\r\n// Routes\r\napp.use(\"/\", authRouter);\r\napp.use(\"/\", profileRouter);\r\napp.use(\"/\", requestRouter);\r\napp.use(\"/\", userRouter);\r\napp.use(\"/api/\", activity);\r\napp.use(\"/\", metricsRouter);\r\n\r\napp.get(\"/\", (req, res) => {\r\n  res.send(\"Server is running\");\r\n});\r\n\r\n// Database and Redis connection, then server initialization\r\nconst startServer = async () => {\r\n  try {\r\n    await connectDB();\r\n    //console.log(\"✅ Database connection established...\");\r\n    logger.info(\"Database connection established....\");\r\n    // Initialize Redis connection\r\n    //Uncomment this when you need redis caching\r\n    //redisClient.connect(); // Explicitly connect if using Redis 4.x+\r\n    logger.info(\"✅ Redis connection established...\");\r\n\r\n      //api check\r\n      app.get(\"/\", (req, res) => {\r\n        res.send(\"Welcome to Internet Fusion API\");\r\n        logger.info(\"Welcome to Internet Fusion API\");\r\n      });\r\n    // Start server\r\n    app.listen(PORT, () => {\r\n      logger.info(`🚀 Server is running on port ${PORT}...`);\r\n    });\r\n  } catch (err) {\r\n    logger.error(\"❌ Failed to start the server:\", err.message);\r\n  }\r\n};\r\n\r\nstartServer();\r\n"],"file":"index.dev.js"}