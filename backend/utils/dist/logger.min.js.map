{"version":3,"sources":["logger.js"],"names":["winston","require","DailyRotateFile","createLogger","combine","format","timestamp","printf","colorize","errors","customLevels","levels","transports","colors","error","warn","info","addColors","_ref","level","message","stack","logger","logFormat","Console","handleExceptions","datePattern","zippedArchive","http","trim","write","exports"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,gBAAkBD,QAAQ,6BAD1BD,OAANA,QAAMA,OAAUC,WAAhBD,QAAgBC,WAAQE,aAAxBH,QAAwBG,aAGhBC,QAAiDC,OAAjDD,QAASE,UAAwCD,OAAxCC,UAAWC,OAA6BF,OAA7BE,OAAQC,SAAqBH,OAArBG,SAAUC,OAAWJ,OAAXI,OAExCC,aAAe,CACnBC,OAAQ,CAJMC,MAAAA,EAAYT,KAAAA,EACpBC,KAAAA,EAASE,KAAAA,EAAWC,MAQjB,GAETM,OAAQ,CARJH,MAAAA,MACJC,KAAQ,SACNG,KAAK,QACLC,KAAM,UACNC,MAHM,SAORH,QAAMI,UAAEP,aAAAG,QAENE,IAAAA,UAFMR,OAAA,SAAAW,GAAA,IAAAC,EAAAD,EAAAC,MAAAC,EAAAF,EAAAE,QAAAd,EAAAY,EAAAZ,UAAAe,EAAAH,EAAAG,MAGNL,MAAAA,GAAAA,OAAMV,EAANU,MAAAA,OAHMG,EAGNH,OAAAA,OAHMK,GAAAD,KAAAE,OAAAnB,aAAA,CARVQ,OAAAD,aAAAC,OAiBAX,OAAQiB,QAEFM,UAAS,CAAGhB,OAAO,wBAA0CE,OAAA,CAAAY,OAAvCF,IAAuCX,WAAAe,WACjEX,WAAA,CADF,IAAAA,WAAAY,QAAA,CAIMF,MAASnB,QACbQ,kBAAqBA,IAEPN,IAAAA,gBAAQ,CACpBI,SAAO,8BAAEY,YAAO,aAChBb,SAHa,MAMfI,MAAU,OAENO,kBADqB,EAErBM,eAAgB,KAIhBC,aAAW,IAGXD,OAAAA,OAAAA,CACAE,MAAAA,SAAeP,GAXPE,OARcM,KAAAR,EAAAS,UA0B1BC,OAAKC,QAAET","file":"logger.min.js","sourcesContent":["const winston = require('winston');\r\nconst DailyRotateFile = require('winston-daily-rotate-file');\r\nconst { format, transports, createLogger } = winston;\r\nconst { combine, timestamp, printf, colorize, errors } = format;\r\n\r\nconst customLevels = {\r\n  levels: {\r\n    error: 0,\r\n    warn: 1,\r\n    info: 2,\r\n    http: 3,\r\n    debug: 4,\r\n  },\r\n  colors: {\r\n    error: 'red',\r\n    warn: 'yellow',\r\n    info: 'green',\r\n    http: 'magenta',\r\n    debug: 'blue',\r\n  },\r\n};\r\n\r\nwinston.addColors(customLevels.colors);\r\n\r\nconst logFormat = printf(({ level, message, timestamp, stack }) => {\r\n  return `${timestamp} [${level}]: ${stack || message}`;\r\n});\r\n\r\nconst logger = createLogger({\r\n  levels: customLevels.levels,\r\n  format: combine(\r\n    timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),\r\n    errors({ stack: true }),\r\n    colorize(),\r\n    logFormat\r\n  ),\r\n  transports: [\r\n    new transports.Console({\r\n      level: 'debug',\r\n      handleExceptions: true,\r\n    }),\r\n    new DailyRotateFile({\r\n      filename: 'logs/application-%DATE%.log',\r\n      datePattern: 'YYYY-MM-DD',\r\n      maxFiles: '14d',\r\n      level: 'info',\r\n      handleExceptions: true,\r\n      zippedArchive: true,\r\n    }),\r\n  ],\r\n  exitOnError: false,\r\n});\r\n\r\nlogger.stream = {\r\n  write: function (message) {\r\n    logger.http(message.trim());\r\n  },\r\n};\r\n\r\nmodule.exports = logger;"]}